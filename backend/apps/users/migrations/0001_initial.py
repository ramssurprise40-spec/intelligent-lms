# Generated by Django 5.2.6 on 2025-09-09 18:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('student', 'Student'), ('instructor', 'Instructor'), ('admin', 'Administrator'), ('teaching_assistant', 'Teaching Assistant'), ('content_creator', 'Content Creator'), ('institution_admin', 'Institution Admin')], default='student', max_length=20)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('language', models.CharField(default='en', max_length=10)),
                ('learning_style', models.CharField(blank=True, choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading_writing', 'Reading/Writing'), ('multimodal', 'Multimodal')], max_length=20, null=True)),
                ('preferred_difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('study_time_preference', models.CharField(choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), ('night', 'Night'), ('flexible', 'Flexible')], default='flexible', max_length=20)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('friends', 'Friends Only')], default='public', max_length=10)),
                ('is_verified', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('major', models.CharField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_study_hours', models.FloatField(default=0.0)),
                ('courses_completed', models.IntegerField(default=0)),
                ('average_score', models.FloatField(blank=True, null=True)),
                ('skill_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('login_streak', models.IntegerField(default=0)),
                ('max_login_streak', models.IntegerField(default=0)),
                ('forum_posts', models.IntegerField(default=0)),
                ('forum_reputation', models.IntegerField(default=100)),
                ('badges_earned', models.IntegerField(default=0)),
                ('learning_path_recommendation', models.JSONField(blank=True, default=dict)),
                ('strengths', models.JSONField(blank=True, default=list)),
                ('improvement_areas', models.JSONField(blank=True, default=list)),
                ('predicted_success_rate', models.FloatField(blank=True, null=True)),
                ('content_preferences', models.JSONField(blank=True, default=dict)),
                ('interaction_patterns', models.JSONField(blank=True, default=dict)),
                ('optimal_study_schedule', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_analytics_update', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'users_profile',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('course_view', 'Course View'), ('lesson_complete', 'Lesson Complete'), ('quiz_attempt', 'Quiz Attempt'), ('assignment_submit', 'Assignment Submit'), ('forum_post', 'Forum Post'), ('resource_download', 'Resource Download'), ('search', 'Search'), ('interaction', 'Interaction')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.CharField(blank=True, max_length=100, null=True)),
                ('object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'users_activity',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='users_activ_user_id_96b46e_idx'), models.Index(fields=['activity_type', 'timestamp'], name='users_activ_activit_c5d74a_idx'), models.Index(fields=['session_id'], name='users_activ_session_5c0439_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('system', 'System'), ('course', 'Course'), ('assignment', 'Assignment'), ('grade', 'Grade'), ('message', 'Message'), ('forum', 'Forum'), ('achievement', 'Achievement'), ('reminder', 'Reminder'), ('announcement', 'Announcement')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('action_url', models.URLField(blank=True)),
                ('action_label', models.CharField(blank=True, max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sent_via_email', models.BooleanField(default=False)),
                ('sent_via_push', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('push_sent_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'users_notification',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read', 'created_at'], name='users_notif_user_id_0b72f9_idx'), models.Index(fields=['notification_type', 'created_at'], name='users_notif_notific_5f4a5e_idx'), models.Index(fields=['priority', 'created_at'], name='users_notif_priorit_a95b3b_idx')],
            },
        ),
    ]
