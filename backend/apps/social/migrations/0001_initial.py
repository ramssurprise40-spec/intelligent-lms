# Generated by Django 5.2.6 on 2025-09-09 18:30

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assessments', '0003_initial'),
        ('courses', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CollaborationSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('session_type', models.CharField(choices=[('study', 'Study Session'), ('project_work', 'Project Work'), ('problem_solving', 'Problem Solving'), ('peer_review', 'Peer Review'), ('discussion', 'Discussion')], max_length=20)),
                ('scheduled_at', models.DateTimeField()),
                ('duration_minutes', models.IntegerField(default=60)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('effectiveness_score', models.FloatField(blank=True, null=True)),
                ('collaboration_quality', models.JSONField(blank=True, default=dict)),
                ('learning_outcomes', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaboration_sessions', to='courses.course')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_sessions', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='collaboration_sessions', to=settings.AUTH_USER_MODEL)),
                ('related_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.assessment')),
                ('related_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.lesson')),
            ],
            options={
                'db_table': 'social_collaborationsession',
            },
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='active', max_length=20)),
                ('is_private', models.BooleanField(default=False)),
                ('max_members', models.IntegerField(default=10)),
                ('matching_criteria', models.JSONField(blank=True, default=dict)),
                ('compatibility_scores', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='courses.course')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_study_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_studygroup',
            },
        ),
        migrations.CreateModel(
            name='StudyGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('leader', 'Leader')], default='member', max_length=10)),
                ('contribution_score', models.FloatField(default=0.0)),
                ('last_activity', models.DateTimeField(auto_now_add=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('study_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.studygroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_studygroup_membership',
                'unique_together': {('user', 'study_group')},
            },
        ),
        migrations.AddField(
            model_name='studygroup',
            name='members',
            field=models.ManyToManyField(related_name='study_groups', through='social.StudyGroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PeerConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('connection_type', models.CharField(choices=[('study_partner', 'Study Partner'), ('mentor', 'Mentor'), ('mentee', 'Mentee'), ('friend', 'Friend'), ('classmate', 'Classmate')], max_length=20)),
                ('strength_score', models.FloatField(default=0.0)),
                ('interaction_frequency', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_mutual', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_connections', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_connections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_peerconnection',
                'unique_together': {('from_user', 'to_user', 'connection_type')},
            },
        ),
    ]
