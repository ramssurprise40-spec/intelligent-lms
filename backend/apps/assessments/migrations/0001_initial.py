# Generated by Django 5.2.6 on 2025-09-09 18:27

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('assessment_type', models.CharField(choices=[('quiz', 'Quiz'), ('assignment', 'Assignment'), ('exam', 'Exam'), ('project', 'Project'), ('peer_review', 'Peer Review'), ('discussion', 'Discussion'), ('survey', 'Survey')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('closed', 'Closed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('grading_method', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual'), ('hybrid', 'Hybrid (AI + Manual)'), ('peer', 'Peer Grading')], default='automatic', max_length=20)),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('time_limit_minutes', models.IntegerField(blank=True, null=True)),
                ('max_score', models.FloatField(default=100.0)),
                ('passing_score', models.FloatField(blank=True, null=True)),
                ('weight', models.FloatField(default=1.0)),
                ('max_attempts', models.IntegerField(default=1)),
                ('allow_late_submission', models.BooleanField(default=False)),
                ('late_penalty_percent', models.FloatField(default=0.0)),
                ('auto_generate_feedback', models.BooleanField(default=True)),
                ('plagiarism_check', models.BooleanField(default=True)),
                ('difficulty_analysis', models.JSONField(blank=True, default=dict)),
                ('instructions', models.TextField(blank=True)),
                ('resources', models.JSONField(blank=True, default=list)),
                ('rubric', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assessments_assessment',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_submissions', models.IntegerField(default=0)),
                ('average_score', models.FloatField(blank=True, null=True)),
                ('median_score', models.FloatField(blank=True, null=True)),
                ('pass_rate', models.FloatField(blank=True, null=True)),
                ('average_completion_time', models.DurationField(blank=True, null=True)),
                ('median_completion_time', models.DurationField(blank=True, null=True)),
                ('question_analytics', models.JSONField(blank=True, default=dict)),
                ('difficult_questions', models.JSONField(blank=True, default=list)),
                ('learning_gaps_identified', models.JSONField(blank=True, default=list)),
                ('improvement_suggestions', models.JSONField(blank=True, default=list)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assessments_analytics',
            },
        ),
        migrations.CreateModel(
            name='AssessmentSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attempt_number', models.IntegerField(default=1)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('submitted', 'Submitted'), ('graded', 'Graded'), ('returned', 'Returned')], default='in_progress', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('time_spent', models.DurationField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('percentage', models.FloatField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, max_length=10)),
                ('plagiarism_score', models.FloatField(blank=True, null=True)),
                ('plagiarism_sources', models.JSONField(blank=True, default=list)),
                ('ai_feedback', models.TextField(blank=True)),
                ('learning_gaps', models.JSONField(blank=True, default=list)),
                ('instructor_feedback', models.TextField(blank=True)),
                ('is_late', models.BooleanField(default=False)),
                ('needs_review', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'assessments_submission',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='GradingRubric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('criteria', models.JSONField(default=list)),
                ('total_points', models.FloatField()),
                ('ai_assisted', models.BooleanField(default=True)),
                ('consistency_check', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assessments_rubric',
            },
        ),
        migrations.CreateModel(
            name='PeerReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue')], default='assigned', max_length=20)),
                ('score', models.FloatField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True)),
                ('detailed_ratings', models.JSONField(blank=True, default=dict)),
                ('review_quality_score', models.FloatField(blank=True, null=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assessments_peer_review',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching'), ('ordering', 'Ordering'), ('file_upload', 'File Upload'), ('code', 'Code')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('points', models.FloatField(default=1.0)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('question_data', models.JSONField(blank=True, default=dict)),
                ('auto_generated', models.BooleanField(default=False)),
                ('topics', models.JSONField(blank=True, default=list)),
                ('learning_objectives', models.JSONField(blank=True, default=list)),
                ('average_score', models.FloatField(blank=True, null=True)),
                ('answer_distribution', models.JSONField(blank=True, default=dict)),
                ('discrimination_index', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assessments_question',
                'ordering': ['assessment', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('response_data', models.JSONField(default=dict)),
                ('response_text', models.TextField(blank=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('ai_score', models.FloatField(blank=True, null=True)),
                ('ai_feedback', models.TextField(blank=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('manual_score', models.FloatField(blank=True, null=True)),
                ('manual_feedback', models.TextField(blank=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assessments_response',
            },
        ),
    ]
